%
% Documentation for C Beetle
%
% Reuben Thomas
%
% Started 1/12/94-8/5/95
%

\documentclass{article}
\usepackage[british]{babel}
\usepackage[utf8x]{inputenc}
\usepackage{a4wide,newpxtext,booktabs,hyperref,siunitx}

% Alter some default parameters for general typesetting

\frenchspacing


% Macros

% Lay out an external interface call

\newlength{\ifacewidth}\ifacewidth=\textwidth \advance\ifacewidth by -0.1in
\newlength{\innerwidth}\innerwidth=\ifacewidth \advance\innerwidth by -0.5in
\newcommand{\ifacec}[2]{\item[]\parbox{\ifacewidth}{\hspace*{2.5mm}{\tt #1}\\[0.5ex]\hspace*{0.4in}\parbox{\innerwidth}{#2}}}

% Font for stack pictures; macro \spic includes italic correction

\newfont{\spfont}{cmsltt10 scaled 1000}
\newcommand{\spic}[1]{{\spfont\setlength{\baselineskip}{\normalbaselineskip}#1\/}}


\title{An implementation of the Beetle virtual machine\\for POSIX\\version @VERSION@}
\author{Reuben Thomas}
\date{23rd September 2021}

\begin{document}
\maketitle


\section{Introduction}

The Beetle virtual machine~\cite{beetle} provides a portable environment
for the \href{https://github.com/rrthomas/pforth}{pForth} Forth compiler, a compiler for ANSI Standard
Forth~\cite{ANSIforth}. To port pForth to a new CPU architecture or operating system, only Beetle need be rewritten. However, even this can be
avoided if Beetle is itself written in ISO C, since almost all systems have
an ISO C compiler available for them.

Writing Beetle in C necessarily leads to a loss of performance for a system
which is already relatively slow by virtue of using a virtual machine
rather than compiling native code. However, pForth is intended mainly as a
didactic tool, offering a concrete Forth environment which may be used to
explore the language, and particularly the implementation of the compiler, on
a simple architecture designed to support Forth. Thus speed is not crucial,
and on modern systems even a C implementation of Beetle can be expected to
run at an acceptable speed.

As well as the virtual machine, C Beetle provides a debugger, which is described in~\cite{beetleuiface}.

The Beetle virtual machine is described in~\cite{beetle}. This paper only
describes the features specific to this implementation.


\section{Using C Beetle}

This section describes how to compile C Beetle, and the exact manner in which
the interface calls and Beetle's memory and registers should be accessed.


\subsection{Configuration}
\label{configuration}

Beetle is written in ISO C99 using POSIX-1.2001 APIs.

The Beetle virtual machine is inherently 32-bit, but will run happily on systems with larger (or smaller) addresses.


\subsection{Compilation}

Beetle's build system is written with GNU autotools, and the user
needs only standard POSIX utilities to run it. Installation
instructions are provided in the top-level file {\tt README.md}.


\subsection{Registers and memory}

Beetle's registers are declared in {\tt beetle.h}. Their names correspond to
those given in~\cite[section~2.1]{beetle}, although some have been changed
to meet the rules for C identifiers. C Beetle does not allocate any
memory for Beetle, nor does it initialise any of the registers. C Beetle
provides the interface call {\bf beetle\_init()} to do this (see
section~\ref{usingcalls}).

The variables {\tt EP}, {\tt I}, {\tt A}, {\tt M0}, {\tt MEMORY}, {\tt SP}, {\tt RP}, {\tt THROW}, {\tt BAD} and {\tt ADDRESS}
correspond exactly with the Beetle registers they represent, and may be read
and assigned to accordingly, bearing in mind the restrictions on their use
given in~\cite{beetle}. {\tt THROW}, {\tt BAD} and {\tt ADDRESS} are mapped into Beetle's memory, so they are automatically updated when the corresponding memory locations are written to, and vice versa. {\tt CHECKED} is the constant $1$; it may be read but not assigned to.


\subsection{Extra library calls}

C Beetle provides the following {\tt LIB} calls.

\subsubsection{Command-line arguments}

Two calls are provided to access command-line arguments passed to C Beetle (excluding any that it interprets itself). They are copied from Gforth.

\begin{center}
\begin{tabular}{S[table-format=2.0]lll} \toprule
{\bf Number} & {\bf Forth word} & {\bf Stack effect} & {\bf Description} \\ \midrule
0 & {\tt ARGC} & \spic{-- u} & the number of arguments \\
1 & {\tt ARG} & \spic{u1 -- c-addr u2} & the \spic{u1}th argument \\ \bottomrule
\end{tabular}
\end{center}

\subsubsection{Standard I/O streams}

These {\tt LIB} calls provide access to POSIX standard input, output and error. Each call returns a corresponding file identifier.

\begin{center}
\begin{tabular}{S[table-format=2.0]l} \toprule
{\bf Number} & {\bf POSIX file descriptor} \\ \midrule
2 & {\tt STDIN\_FILENO} \\
3 & {\tt STDOUT\_FILENO} \\
4 & {\tt STDERR\_FILENO} \\ \bottomrule
\end{tabular}
\end{center}

\subsubsection{File system calls}

The file system calls correspond directly to ANS Forth words, as defined in~\cite{ANSIforth}.

\begin{center}
\begin{tabular}{S[table-format=2.0]l} \toprule
{\bf Number} & {\bf Forth word} \\ \midrule
5 & {\tt OPEN-FILE} \\
6 & {\tt CLOSE-FILE} \\
7 & {\tt READ-FILE} \\
8 & {\tt WRITE-FILE} \\
9 & {\tt FILE-POSITION} \\
10 & {\tt REPOSITION-FILE} \\
11 & {\tt FLUSH-FILE} \\
12 & {\tt RENAME-FILE} \\
13 & {\tt DELETE-FILE} \\
14 & {\tt FILE-SIZE} \\
15 & {\tt RESIZE-FILE} \\
16 & {\tt FILE-STATUS} \\
\bottomrule
\end{tabular}
\end{center}

The implementation-dependent cell returned by {\tt FILE-STATUS} contains the POSIX protection bits, given by the {\tt st\_mode} member of the {\tt struct stat} returned for the given file descriptor.

File access methods are bit-masks, composed as follows:

\begin{center}
\begin{tabular}{cc} \toprule
\rule[-2mm]{0mm}{6mm}\bf Bit value & \bf Meaning \\ \midrule
1 & read \\
2 & write \\
4 & binary mode \\ \bottomrule
\end{tabular}
\end{center}

To create a file, set both read and write bits to zero when calling {\tt OPEN-FILE}.


\subsection{Using the interface calls}
\label{usingcalls}

The operation of the specified interface calls is given in~\cite{beetle}. Here, the C prototypes corresponding to the idealised prototypes used in~\cite{beetle} are given. The names are prefixed with {\bf beetle\_}.

Files to be loaded and saved are passed as C file descriptors. Thus, the
calling program must itself open and close the files.

\begin{description}
\ifacec{uint8\_t *native\_address(beetle\_UCELL address, bool writable)}{Returns {\tt NULL} when the address is invalid, or the writable flag is true and the address is read-only.}
\ifacec{beetle\_CELL run(void)}{The reason code returned by {\bf beetle\_run()} is a Beetle
cell.}
\ifacec{beetle\_CELL beetle\_single\_step(void)}{The reason code returned by {\bf beetle\_single\_step()}
is a Beetle cell.}
\ifacec{int beetle\_load\_object(FILE *file, beetle\_UCELL address)}{If a file system error
occurs, the return code is -3. As an extension to the specification, if an object file starts with the bytes $35$, $33$ (\texttt{\#!}), then it is assumed to be the start of a UNIX-style “hash bang” line, and the file contents up to and including the first newline character ($10$) is ignored.}
\end{description}

In addition to the required interface calls C Beetle provides an initialisation routine {\bf beetle\_init()} which, given a cell array and its size, initialises Beetle:

\begin{description}
\ifacec{int beetle\_init(beetle\_CELL *b\_array, size\_t size)}{{\tt size} is
the size of {\tt b\_array} in {\em cells} (not bytes). The return value is $-1$ if {\tt b\_array} is {\tt NULL}, and $0$ otherwise.
All the registers are initialised as per~\cite{beetle}.}
\end{description}

The following routines give easier access to Beetle’s address space at the byte and cell level. On success, they return $0$, and on failure, the relevant exception code.

\begin{description}
\ifacec{int beetle\_load\_cell(beetle\_UCELL address, beetle\_CELL *value)}{Load the cell at the given address into the given {\tt beetle\_CELL *}.}
\ifacec{int beetle\_store\_cell(beetle\_UCELL address, beetle\_CELL value)}{Store the given {\tt CELL} value at the given address.}
\ifacec{int beetle\_load\_byte(beetle\_UCELL address, beetle\_BYTE *value)}{Load the byte at the given address into the given {\tt beetle\_BYTE *}.}
\ifacec{int beetle\_store\_byte(beetle\_UCELL address, beetle\_BYTE value)}{Store the given {\tt beetle\_BYTE} value at the given address.}
\end{description}

The following routines allow direct native access to Beetle’s memory. On success, $0$ is returned; if {\tt to} if not less than {\tt from}, or the addresses are not valid, $-1$ is returned; if either address is unaligned, or some other error occurs, a memory exception code is returned.

\begin{description}
\ifacec{int beetle\_pre\_dma(beetle\_UCELL from, beetle\_UCELL to)}{Convert the given range to native byte order, so that it can be read and written directly.}
\ifacec{int beetle\_post\_dma(beetle\_UCELL from, beetle\_UCELL to)}{Convert the given range to Beetle byte order, so that it can be used by Beetle after a direct access.}
\end{description}

The following routine allows the calling program to register command-line arguments that can be retrieved by the {\tt ARG} and {\tt ARGC} {\tt LIB} calls.

\begin{description}
\ifacec{int beetle\_register\_args(int argc, const char *argv[])}{Registers the given argument list, which has the same format as that supplied to {\bf main()}. Returns $0$ on success and $-1$ if memory could not be allocated.}
\end{description}

Programs which use C Beetle's interface must {\tt \#include} the header file
{\tt beetle.h} and be linked with the Beetle library. {\tt
beetle\_opcodes.h}, which contains an enumeration type of Beetle's instruction set,
and {\tt beetle\_debug.h}, which contains useful debugging functions such as
disassembly, may also be useful; they are not documented here.


\subsection{Other extras provided by C Beetle}

C Beetle provides the following extra quantities and macro in {\tt beetle.h}
which are useful for programming with Beetle:

\begin{description}
\item[{\tt BEETLE\_TRUE}:] a cell with all bits set, which Beetle uses as a true
flag.
\item[{\tt BEETLE\_FALSE}:] a cell with all bits clear, which Beetle uses as a
false flag.
\item[{\tt beetle\_CELL\_W}:] the width of a cell in bytes (4).
\item[{\tt beetle\_POINTER\_W}:] the width of a machine pointer in cells.
\item[{\tt beetle\_NEXT}:] a macro which performs the action of the {\tt NEXT}
instruction.
\item[{\tt beetle\_CELL\_pointer}:] a union with members {\tt beetle\_CELL cells[beetle\_POINTER\_W]} and {\tt void (*pointer)(void)}, which allow a function pointer suitable for the {\tt LINK} instruction to be easily stored and retrieved. It is assumed that the pointer is pushed on to the stack starting with {\tt cells[0]} and ending with {\tt cells[beetle\_POINTER\_W~$-$~1]}.
\end{description}


\bibliographystyle{plain}
\bibliography{vm,rrt}


\end{document}
